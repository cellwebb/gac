"""Prompt creation for GAC."""

import logging
import os
import re
from pathlib import Path

from gac.errors import ConfigError
from gac.preprocess import preprocess_diff

logger = logging.getLogger(__name__)


def find_template_file():
    """Find a prompt template file in standard locations."""
    env_path = os.environ.get("GAC_TEMPLATE_PATH")
    if env_path and os.path.exists(env_path):
        return env_path

    current_dir_path = Path("./prompt.template")
    if current_dir_path.exists():
        return str(current_dir_path)

    config_dir_path = Path.home() / ".config" / "gac" / "prompt.template"
    if config_dir_path.exists():
        return str(config_dir_path)

    package_template = Path(__file__).parent / "templates" / "default.prompt"
    if package_template.exists():
        return str(package_template)

    default_template = Path(__file__).parent.parent.parent / "prompts" / "default.prompt"
    if default_template.exists():
        return str(default_template)

    raise ConfigError("No template file found and no default template defined.")


def load_prompt_template(template_path=None):
    """Load the prompt template from a file or use the default embedded template."""
    if template_path:
        if os.path.exists(template_path):
            logger.debug(f"Loading prompt template from {template_path}")
            with open(template_path, "r") as f:
                return f.read()
        else:
            raise ConfigError(f"Prompt template file not found at {template_path}")

    template_file = find_template_file()
    if template_file:
        logger.debug(f"Loading prompt template from {template_file}")
        with open(template_file, "r") as f:
            return f.read()

    logger.error("No template file found and no default template defined.")
    raise ConfigError("No template file found and no default template defined.")


def build_prompt(status, diff, one_liner=False, hint="", template_path=None):
    """Build a prompt using a template file with XML-style tags."""
    template = load_prompt_template(template_path)

    # Preprocess the diff to filter out binary and minified files
    processed_diff = preprocess_diff(diff)

    template = template.replace("<status></status>", status)
    template = template.replace("<diff></diff>", processed_diff)
    template = template.replace("<hint></hint>", hint)

    if one_liner:
        template = re.sub(r"<multi_line>.*?</multi_line>", "", template, flags=re.DOTALL)
        template = re.sub(r"<one_liner>(.*?)</one_liner>", r"\1", template, flags=re.DOTALL)
    else:
        template = re.sub(r"<one_liner>.*?</one_liner>", "", template, flags=re.DOTALL)
        template = re.sub(r"<multi_line>(.*?)</multi_line>", r"\1", template, flags=re.DOTALL)

    if not hint:
        template = re.sub(r"<hint_section>.*?</hint_section>", "", template, flags=re.DOTALL)
    else:
        template = re.sub(r"<hint_section>(.*?)</hint_section>", r"\1", template, flags=re.DOTALL)

    template = re.sub(r"<[^>]*>", "", template)
    template = re.sub(r"\n{3,}", "\n\n", template)

    return template.strip()


def clean_commit_message(message: str) -> str:
    """Clean up a commit message generated by an AI model."""
    message = message.strip()

    if message.startswith("```"):
        message = message[3:].lstrip()

    if message.endswith("```"):
        message = message[:-3].rstrip()

    if message.startswith("```") and "\n" in message:
        parts = message.split("\n", 1)
        if len(parts) > 1:
            message = parts[1].lstrip()

    for tag in ["<git-status>", "</git-status>", "<git-diff>", "</git-diff>"]:
        message = message.replace(tag, "")

    if not any(
        message.startswith(prefix)
        for prefix in [
            "feat:",
            "fix:",
            "docs:",
            "style:",
            "refactor:",
            "perf:",
            "test:",
            "build:",
            "ci:",
            "chore:",
        ]
    ):
        message = f"chore: {message}"

    return message
