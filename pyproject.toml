[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "gac"
dynamic = ["version"]
description = 'git auto commit'
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = []
authors = [
  { name = "cellwebb", email = "cellwebb@users.noreply.github.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    # AI components
    "aisuite>=0.1.11",
    "anthropic<0.31.0,>=0.30.1",  # Constrained to match aisuite's requirements
    "tiktoken>=0.9.0",
    
    # Core functionality
    "pydantic>=2.11.1",
    "python-dotenv>=1.1.0",
    
    # Git integration
    "unidiff>=0.7.5",  # Git diff parsing library
    
    # CLI and formatting
    "click>=8.1.8",
    "colorama>=0.4.6",
    "halo>=0.0.31",
    "questionary>=2.1.0",
    "rich>=14.0.0",
    
    # Code formatting
    "black>=25.1.0",
    "isort>=6.0.1",
    
    # Utilities
    "docstring_parser>=0.16",
]

[project.scripts]
gac = "gac.main:main"

[project.optional-dependencies]
providers = [
    # All supported AI providers
    "aisuite[anthropic,openai,groq,mistral,ollama]",
]
dev = [
    # Version management
    "bump-my-version>=0.31.1",
    
    # Testing
    "pytest>=8.3.5",
    "pytest-cov>=6.1.0",
    "codecov>=2.1.13",
    
    # Linting
    "flake8>=7.2.0",
    "flake8-pyproject>=1.2.3",
]
all = [
    # Complete provider support
    "aisuite[all]",
]

[project.urls]
Documentation = "https://github.com/cellwebb/gac#readme"
Issues = "https://github.com/cellwebb/gac/issues"
Source = "https://github.com/cellwebb/gac"

[tool.black]
line-length = 100
target-version = ["py313"]

[tool.bump-my-version]
current_version = "v0.5.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[[tool.bump-my-version.files]]
filename = "src/gac/__about__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bump-my-version.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[tool.coverage.run]
source_pkgs = ["gac"]
branch = true
parallel = true
omit = [
  "src/gac/__about__.py",
]

[tool.coverage.paths]
gac = ["src/gac", "*/gac/src/gac"]
tests = ["tests", "*/gac/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "pragma: no cover",
  "def __repr__",
  "raise NotImplementedError",
  "pass",
  "raise ImportError",
  "except ImportError"
]

[tool.flake8]
max-line-length = 100
exclude = [".git", "__pycache__", ".venv", "venv", "build", "dist"]
per-file-ignores = "__init__.py:F401"
ignore = "E203,W503"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
only-packages = true
skip-excluded = true

[tool.hatch.build.targets.wheel]
packages = ["src/gac"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "tests/",
    "*.tests",
    "*.tests.*",
]

[tool.hatch.envs.default]
dependencies = [
    # AI components
    "aisuite[all]",
    "ollama>=0.4.0",
    
    # Core functionality
    "pydantic>=2.11.1",
    
    # CLI and formatting
    "colorama>=0.4.6",
    "halo>=0.0.31",
    
    # Code formatting
    "black>=25.1.0",
    "isort>=6.0.1",
    
    # Testing
    "pytest>=8.3.5",
    "pytest-cov>=6.1.0",
    "codecov>=2.1.13",
    
    # Linting
    "flake8>=7.2.0",
    
    # Version management
    "bump-my-version>=0.31.1",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests} && coverage report"
lint = [
    "black .",
    "isort .",
    "flake8 .",
]
format = [
    "black .",
    "isort .",
]

[tool.hatch.env]
path = ".venv"

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100

[template.plugins.default]
tests = true
src-layout = true
